{"version":3,"sources":["components/homePage.jsx","components/loading.jsx","components/spiderGraph.jsx","components/personalityPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["HomePage","props","className","id","Button","variant","onClick","onLogIn","Loading","SpiderGraph","useState","personalityType","setPersonaliltyType","data","setData","rawData","setRawData","captions","setCaptions","isLoading","setIsLoading","genresPersonality","punk","jazz","classical","rock","alt","reggae","ambient","folk","pop","metal","hop","electro","religious","blues","country","soul","genres","example","mind","energy","nature","tactics","meta","color","useEffect","usersData","genresCount","artists","usersGenres","map","artist","forEach","genre","matches","genreList","every","element","RegExp","test","result","push","getGenres","topArtists","songs","quantityOfSongs","explicitSum","explicitValue","explicit","getExplicitAverage","topSongs","audioAnalysis","averageAnalysis","danceabilityAverage","energyAverage","loudnessAverage","valenceAverage","modeAverage","danceability","loudness","valence","mode","length","getAverageAnalysis","personalityMatches","personality","undefined","Object","entries","points","mindPoint","energyPoint","naturePoint","tacticsPoint","getData","size","half","getCaptions","getPersonalityType","name","Math","abs","onPersonalityAnalysis","options","captionMargin","scales","captionProps","textAnchor","fontSize","fontFamily","parseFloat","toFixed","PersonalityPage","setTopSongs","setTopArtists","setAudioAnalysis","userInformation","setUserInformation","personalityData","setPersonalityData","setIsError","console","log","params","URLSearchParams","append","token","config","headers","axios","post","then","catch","err","request","song","toString","method","qs","stringify","url","finally","JSON","App","setToken","isLoggedIn","setIsLoggedIn","handleLogIn","logStatus","window","location","value","document","hash","cookiestring","match","cookie","replace","Cookies","set","path","setCookieFromUrl","cookiename","exec","cookieParser","FirstPage","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8134bf20.chunk.js","sourcesContent":["// Dependencies\nimport { React } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst HomePage = (props) => {\n  return (\n    <div>\n      <div className=\"row\">\n        <div className=\"col-lg-12\" id=\"title-container\">\n          <h1 id=\"title\">Spotify Personality</h1>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-lg-6 col-xs-12\">\n          <div id=\"log-in-container\">\n            <Button\n              variant=\"primary\"\n              id=\"log-in-button\"\n              onClick={() => {\n                props.onLogIn(true);\n              }}\n            >\n              Log in with Spotify\n            </Button>\n            <div id=\"warning\">\n              <p id=\"warning-text\">\n                This is not a real Personality test, don't take it seriously!\n              </p>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-lg-6 col-xs-12\" id=\"image-container\">\n          <img id=\"spider-grid-example\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HomePage;\n","import {React, Fragment} from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst Loading = () => {\n    return(\n        <Fragment>\n            <div>\n                Loading...\n            </div>\n        </Fragment>\n    );\n}\n\nexport default Loading;","import { React, useEffect, useState } from \"react\";\nimport RadarChart from \"react-svg-radar-chart\";\nimport Loading from \"./loading\";\nimport \"react-svg-radar-chart/build/css/index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../css/spiderGraph.css\";\n\nconst SpiderGraph = (props) => {\n  const [personalityType, setPersonaliltyType] = useState();\n  const [data, setData] = useState();\n  const [rawData, setRawData] = useState();\n  const [captions, setCaptions] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n\n  const options = {\n    captionMargin: 30,\n    scales: 4,\n    captionProps: () => ({\n      className: \"caption\",\n      textAnchor: \"middle\",\n      fontSize: 15,\n      fontFamily: \"sans-serif\",\n    }),\n  };\n  // What type of people love this genre?\n  const genresPersonality = {\n    punk: \"ISTP\",\n    jazz: \"ENFJ\",\n    classical: \"ENTJ\",\n    rock: \"INTP\",\n    alt: \"INFP\",\n    reggae: \"ISFP\",\n    ambient: \"ISFP\",\n    folk: \"INFJ\",\n    pop: \"ENFP\",\n    metal: \"INTJ\",\n    hop: \"ESTJ\",\n    electro: \"ESTP\",\n    religious: \"ISFJ\",\n    blues: \"ENFP\",\n    country: \"ESFJ\",\n    soul: \"ESFP\",\n  };\n\n  const genres = [\n    \"punk\",\n    \"jazz\",\n    \"classical\",\n    \"rock\",\n    \"alt\",\n    \"reggae\",\n    \"ambient\",\n    \"folk\",\n    \"pop\",\n    \"metal\",\n    \"hop\",\n    \"electro\",\n    \"religious\",\n    \"blues\",\n    \"country\",\n    \"soul\",\n  ];\n\n  const example = [\n    {\n      data: {\n        mind: 18,\n        energy: 14,\n        nature: 12,\n        tactics: 24,\n      },\n      meta: { color: \"blue\" },\n    },\n  ];\n\n  const getGenres = (artists) => {\n    let genresCount = [];\n    let usersGenres = artists.map((artist) => {\n      return artist.genres;\n    });\n\n    genres.forEach((genre) => {\n      let matches = 0;\n      usersGenres.forEach((genreList) => {\n        // Avoid multiple matches for every list\n        // This gets a more accurate result\n        genreList.every((element) => {\n          let pattern = new RegExp(genre);\n          let match = pattern.test(element);\n          if (match) {\n            matches++;\n            return false;\n          } else {\n            return true;\n          }\n        });\n      });\n\n      let result = {\n        genre: genre,\n        matches: matches,\n      };\n      genresCount.push(result);\n    });\n\n    return genresCount;\n  };\n\n  const getExplicitAverage = (songs) => {\n    let quantityOfSongs = 0;\n    let explicitSum = 0;\n    songs.forEach((element) => {\n      let explicitValue = element.explicit ? 1 : 0;\n      explicitSum += explicitValue;\n      quantityOfSongs++;\n    });\n    let explicitAverage = explicitSum / quantityOfSongs;\n    return explicitAverage;\n  };\n\n  const getAverageAnalysis = (audioAnalysis) => {\n    let averageAnalysis = {\n      danceabilityAverage: 0,\n      energyAverage: 0,\n      loudnessAverage: 0,\n      valenceAverage: 0,\n      modeAverage: 0,\n    };\n\n    // Get the sum of all values\n    audioAnalysis.forEach((element) => {\n      averageAnalysis.danceabilityAverage += element.danceability;\n      averageAnalysis.energyAverage += element.energy;\n      averageAnalysis.loudnessAverage += element.loudness;\n      averageAnalysis.valenceAverage += element.valence;\n      averageAnalysis.modeAverage += element.mode;\n    });\n\n    //Get the actual average\n    audioAnalysis.map((element) => {\n      return element / audioAnalysis.length;\n    });\n\n    return averageAnalysis;\n  };\n\n  const getData = (genresCount) => {\n    let personalityMatches = {};\n    let mind = 0;\n    let energy = 0;\n    let nature = 0;\n    let tactics = 0;\n\n    genresCount.forEach((element) => {\n      let personality = genresPersonality[element.genre];\n      if (personalityMatches[personality] === undefined) {\n        personalityMatches[personality] = element.matches;\n      } else {\n        personalityMatches[personality] += element.matches;\n      }\n    });\n\n    // Correct data\n    Object.entries(personalityMatches).forEach((element) => {\n      let personalityType = element[0];\n      let points = element[1];\n      let mindPoint = personalityType[0] === \"E\" ? points : -points;\n      let energyPoint = personalityType[1] === \"N\" ? points : -points;\n      let naturePoint = personalityType[2] === \"F\" ? points : -points;\n      let tacticsPoint = personalityType[3] === \"P\" ? points : -points;\n\n      mind += mindPoint;\n      energy += energyPoint;\n      nature += naturePoint;\n      tactics += tacticsPoint;\n    });\n\n    let data = {\n      mind: mind,\n      energy: energy,\n      nature: nature,\n      tactics: tactics,\n    };\n\n    return data;\n  };\n\n  const getCaptions = (data, size) => {\n    let half = size / 2;\n    let mindCaption = data.mind > half ? \"Extraversion\" : \"Extroversion\";\n    let energyCaption = data.energy > half ? \"Intuitive\" : \"Observant\";\n    let natureCaption = data.nature > half ? \"Feeling\" : \"Thinking\";\n    let tacticsCaption = data.tactics > half ? \"Prospection\" : \"Judging\";\n\n    let captions = {\n      mind: mindCaption,\n      energy: energyCaption,\n      nature: natureCaption,\n      tactics: tacticsCaption,\n    };\n\n    return captions;\n  };\n\n  const getPersonalityType = (data) => {\n    let personalityType = \"\";\n    let mind = data.mind[0];\n    let energy = data.energy[2] === \"s\" ? \"S\" : \"N\";\n    let nature = data.nature[0];\n    let tactics = data.tactics[0];\n    personalityType += mind + energy + nature + tactics;\n    return personalityType;\n  };\n\n  useEffect(() => {\n    let usersData = example;\n\n    let genresCount = getGenres(props.topArtists.data);\n    let explicitAverage = getExplicitAverage(props.topSongs.data);\n    let averageAnalysis = getAverageAnalysis(props.audioAnalysis.data);\n\n    // Data values\n    let rawData = getData(genresCount, averageAnalysis, explicitAverage);\n\n    let captions = getCaptions(rawData, genresCount.length);\n    setCaptions(captions);\n\n    let personalityType = getPersonalityType(captions);\n    setPersonaliltyType(personalityType);\n\n    // Set values to positive and scale it\n    Object.entries(rawData).forEach((element) => {\n      let name = element[0];\n      rawData[name] = Math.abs(element[1] * 1.3) / 100;\n    });\n\n    setRawData(rawData);\n\n    usersData[0][\"data\"] = rawData;\n    setData(usersData);\n    props.onPersonalityAnalysis(genresCount);\n\n    setIsLoading(false);\n  }, [props.topArtists]);\n\n  return (\n    <div>\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <div id=\"analysis-container\">\n          <RadarChart\n            captions={captions}\n            data={data}\n            size={500}\n            options={options}\n          />\n          <p id=\"personality-type\">Personality: {personalityType}</p>\n          <p id>Mind: {parseFloat(rawData.mind).toFixed(3)}</p>\n          <p id>Energy: {parseFloat(rawData.energy).toFixed(3)}</p>\n          <p id>Nature: {parseFloat(rawData.nature).toFixed(3)}</p>\n          <p id>Tactics: {parseFloat(rawData.tactics).toFixed(3)}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SpiderGraph;\n","// Dependencies\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { React, useEffect, useState, Fragment } from \"react\";\nimport axios from \"axios\";\nimport qs from \"qs\";\n\n// Components\nimport Loading from \"./loading\";\nimport SpiderGraph from \"./spiderGraph\";\n\nconst PersonalityPage = (props) => {\n  const [topSongs, setTopSongs] = useState();\n  const [topArtists, setTopArtists] = useState();\n  const [audioAnalysis, setAudioAnalysis] = useState();\n  const [userInformation, setUserInformation] = useState();\n  const [personalityData, setPersonalityData] = useState();\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    console.log(\"request\");\n    const params = new URLSearchParams();\n    params.append(\"accessToken\", props.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n    };\n    // Get User's infomation\n    axios\n      .post(\"https://boiling-reaches-39573.herokuapp.com/getMe/\", params, config)\n      .then((result) => {\n        setUserInformation(result);\n      })\n      .catch((err) => {\n        console.log(err);\n        setIsError(true);\n      });\n\n    // Get top Artists\n    axios\n      .post(\"https://boiling-reaches-39573.herokuapp.com/getUsersTop/getTopArtists/\", params, config)\n      .then((result) => {\n        setTopArtists(result);\n      })\n      .catch((err) => {\n        console.log(err);\n        setIsError(true);\n      });\n\n    //Get Top Songs\n    axios\n      .post(\"https://boiling-reaches-39573.herokuapp.com/getUsersTop/getTopSongs/\", params, config)\n      .then((songs) => {\n        setTopSongs(songs);\n        let request = {};\n        let data = songs.data.map((song) => {\n          let songID = song.id.toString();\n          let songName = song.name;\n          let track = {\n            id: songID,\n            name: songName,\n          };\n          return track;\n        });\n        request[\"accessToken\"] = props.token;\n        request[\"tracks\"] = data;\n        const options = {\n          method: \"POST\",\n          headers: { \"content-type\": \"application/x-www-form-urlencoded\" },\n          data: qs.stringify(request),\n          url: \"https://boiling-reaches-39573.herokuapp.com/getUsersTop/getAudioAnalysis/\",\n        };\n        axios(options)\n          .then((result) => {\n            setAudioAnalysis(result);\n          })\n          .finally(() => {\n            setIsError(false);\n            setIsLoading(false);\n          });\n      })\n      .catch((err) => {\n        console.log(\"Error: \", err);\n        setIsError(true);\n        console.log(err);\n      });\n  }, [props.token]);\n\n  const handlePersonalityData = (data) => {\n    setPersonalityData(data);\n  };\n\n  return (\n    <Fragment>\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <div className=\"row\">\n          <div className=\"col-xl-4\">\n            <SpiderGraph\n              topArtists={topArtists}\n              topSongs={topSongs}\n              audioAnalysis={audioAnalysis}\n              userInformation={userInformation}\n              onPersonalityAnalysis={handlePersonalityData}\n            />\n          </div>\n          <div className=\"col-xl-8\">\n            {JSON.stringify(personalityData)}\n          </div>\n        </div>\n      )}\n    </Fragment>\n  );\n};\n\nexport default PersonalityPage;\n","// Dependencies\nimport { React, useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Cookies from \"universal-cookie\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n// Components\nimport HomePage from \"./components/homePage\";\nimport PersonalityPage from \"./components/personalityPage\";\n\nconst App = () => {\n  const [token, setToken] = useState();\n  const [isLoggedIn, setIsLoggedIn] = useState();\n\n  const handleLogIn = (logStatus) => {\n    if (logStatus) {\n      window.location =\n        \"https://boiling-reaches-39573.herokuapp.com/auth/login\";\n    }\n  };\n\n  const cookieParser = (cookiename) => {\n    var cookiestring = RegExp(cookiename + \"=[^;]+\").exec(document.cookie);\n    if (cookiestring) {\n      cookiestring = cookiestring[0].replace(cookiename + \"=\", \"\");\n      return cookiestring;\n    } else return false;\n  };\n\n  const setCookieFromUrl = () => {\n    let value = document.location.hash;\n    var cookiestring = RegExp(\"access_token\" + \"=[a-zA-Z0-9_-]*\");\n    let match = value.match(cookiestring);\n    if (match) {\n      let cookie = value.match(cookiestring)[0].replace(\"access_token=\", \"\");\n      const cookies = new Cookies();\n      cookies.set(\"accessToken\", cookie, { path: \"/\" });\n      window.location = \"https://thealf154.github.io/spotify-personality/\";\n    }\n  };\n\n  useEffect(() => {\n    setCookieFromUrl();\n    let token = cookieParser(\"accessToken\");\n    setToken(token);\n    // Use API to get information if the token is available\n    if (token) {\n      setIsLoggedIn(true);\n    } else {\n      setIsLoggedIn(false);\n    }\n  }, []);\n\n  const FirstPage = (props) => {\n    if (props.isLoggedIn) {\n      return <PersonalityPage token={token} />;\n    } else {\n      return <HomePage onLogIn={handleLogIn} />;\n    }\n  };\n\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\">\n          <FirstPage isLoggedIn={isLoggedIn} />\n        </Route>\n        <Route path=\"/access_token\">\n          <FirstPage isLoggedIn={isLoggedIn} />\n        </Route>\n        <Route path='*' exact={true} component={FirstPage} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}